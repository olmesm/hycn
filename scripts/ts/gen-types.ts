import { watch, writeFileSync } from "fs"
import path from "path"
import { Glob } from "bun"
import { kebabCase, camelCase, upperFirst } from "lodash-es"

const DIR = path.join(process.cwd(), "src", "components")
const OUT = path.join(process.cwd(), "src", "globals.d.ts")
const GLOB = path.join(DIR, "**", "*.tsx")
const glob = new Glob(GLOB)

const template = (
  data: {
    fileName: string
    typeName: string
    relPath: string
  }[],
) =>
  `// AUTOGENERATED - DO NOT EDIT
${data.map((d) => `import { Type as ${d.typeName} } from "${d.relPath}"`).join("\n")}

declare global {
  namespace JSX {
    interface IntrinsicElements {
${data.map((d) => `      "${d.fileName}": ${d.typeName}["Definition"]`).join("\n")}
    }
  }
}
`

const makeFile = (files: string[]) => {
  const collisions: string[] = []
  const data = files.map((f) => {
    const name = kebabCase(path.basename(f).replace(path.extname(f), ""))

    if (collisions.includes(name)) {
      console.error(`[error] <${name} /> in ${f}`)
      throw new Error(`Duplicate components detected`)
    }

    collisions.push(name)

    return {
      fileName: name,
      typeName: upperFirst(camelCase(name) + "Type"),
      relPath: path.relative(OUT, f.replace(path.extname(f), "")).slice(1),
    }
  })

  writeFileSync(OUT, template(data), { encoding: "utf-8" })
}

const run = async () => {
  const fileList = []
  for await (const file of glob.scan(".")) {
    fileList.push(file)
  }

  makeFile(fileList)
}

if (process.env.WATCH !== "false") {
  const watcher = watch(DIR, async (event, filename) => {
    if (process.env.DEBUG) console.log(`Detected ${event} in ${filename}`)
    await run()
  })

  process.on("SIGINT", () => {
    watcher?.close()

    process.exit(0)
  })
}

run()
